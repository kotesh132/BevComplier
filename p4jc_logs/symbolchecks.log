INFO  - trying to parse /Users/kmalempa/Perforce/kmalempa_mac_72gt_t1/sw/p4/test_cases/beverly_all/base1.p4
WARN  - Done with /Users/kmalempa/Perforce/kmalempa_mac_72gt_t1/sw/p4/test_cases/beverly_all/base1.p4
INFO  - Write to file: /Users/kmalempa/Perforce/kmalempa_mac_72gt_t1/sw/p4/p4jc/cfg_base1/base1.p4
INFO  - Preprocssing done
INFO  - trying to parse base1.p4
WARN  - Done with base1.p4
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
INFO  - Starting Quadrupalizing
INFO  - Starting Else Removal
INFO  - Assigning Predicates
INFO  - meta.l3_metadata.lkp_l4_sport = hdr.tcp.srcPort;
INFO  - meta.l3_metadata.lkp_l4_dport = hdr.tcp.dstPort;
INFO  - meta.l3_metadata.lkp_l4_sport = hdr.udp.srcPort;
INFO  - meta.l3_metadata.lkp_l4_dport = hdr.udp.dstPort;
INFO  - meta.fwd_metadata.l2ptr=ptr;
INFO  - meta.fwd_metadata.out_bd=bd;
INFO  - hdr.ipv4.dstAddr=dst_adr;
INFO  - hdr.ipv4.srcAddr=src_adr;
INFO  - hdr.ipv6.payloadLen=ipv6_payloadLen;
INFO  - hdr.tcp.srcPort=tcp_srcPort;
INFO  - hdr.udp.srcPort=udp_srcPort;
INFO  - t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr;//PREDICATE = hdr.ipv4.isValid()
INFO  - t2 = hdr.ipv4.isValid()&&t1;//PREDICATE = hdr.ipv4.isValid()
INFO  - Done with Predicates
INFO  - Done with valids
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
INFO  - error {
    NoError,           
    PacketTooShort,    
    NoMatch,           
    StackOutOfBounds,  
    OverwritingHeader, 
    HeaderTooShort,    
    ParserTimeout      
}

extern packet_in {
    
    void extract<T>(out T hdr);
    
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    
    T lookahead<T>();
    
    void advance(in bit<32> sizeInBits);
    
    bit<32> length();
}

extern packet_out {
    void emit<T>(in T hdr);
    void emit<T>(in bool condition, in T data);
}

extern void verify(in bool check, in error toSignal);

@name("NoAction")
action NoAction() {
{
{
}

}
}


match_kind {
    exact,
    ternary,
    lpm
}

struct standard_metadata_t {
    bit<8>  ingress_port;
    bit<8>  egress_port;
}

struct fwd_metadata_t {
    bit<24> l2ptr;
    bit<24> out_bd;
}

struct l3_metadata_t {
    bit<16> lkp_l4_sport;
    bit<16> lkp_l4_dport;
}

header ipv4_up_to_ihl_only_h {
    bit<4> version;
    bit<4> ihl;
}

header pie_t {
    bit<32> pie_word0;
    bit<32> pie_word1;
    bit<32> pie_word2;
    bit<32> pie_word3;
    bit<32> pie_word4;
    bit<32> pie_word5;
    bit<32> pie_word6;
    bit<32> pie_word7;
}

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header vntag_t {
    bit<1>  direction;
    bit<1>  pointer;
    bit<14> destVif;
    bit<1>  looped;
    bit<1>  reserved;
    bit<2>  version;
    bit<12> srcVif;
    bit<16> etherType;
}

header vlan_tag_t {
    bit<3>  pcp;
    bit<1>  cfi;
    bit<12> vid;
    bit<16> etherType;
}

header cisco_cmd_pt1_header_t {
    bit<8>      version;
    bit<8>      length_;
    bit<3>      len;
    bit<13>     optionType;
}

header cisco_cmd_pt2_header_t {
    varbit<480> metadataPayload;
}

header cisco_cmd_pt3_header_t {
    bit<16> etherType;
}

header llc_header_t {
    bit<8> dsap;
    bit<8> ssap;
    bit<8> control_;
}

header snap_header_t {
    bit<24> oui;
    bit<16> type_;
}

header fcoe_header_t {
    bit<4>  version;
    bit<4>  type_;
    bit<8>  sof;
    bit<32> rsvd1;
    bit<32> ts_upper;
    bit<32> ts_lower;
    bit<32> size_;
    bit<8>  eof;
    bit<24> rsvd2;
}

header roce_header_t {
    bit<320> ib_grh;
    bit<96>  ib_bth;
}

header vxlan_t {
    bit<8>  flags;
    bit<24> reserved;
    bit<24> vni;
    bit<8>  reserved2;
}

header gre_t {
    bit<1>  C;
    bit<1>  R;
    bit<1>  K;
    bit<1>  S;
    bit<1>  s;
    bit<3>  recurse;
    bit<5>  flags;
    bit<3>  ver;
    bit<16> proto;
}

header nvgre_t {
    bit<24> tni;
    bit<8>  flow_id;
}

header geneve_t {
    bit<2>  ver;
    bit<6>  optLen;
    bit<1>  oam;
    bit<1>  critical;
    bit<6>  reserved;
    bit<16> protoType;
    bit<24> vni;
    bit<8>  reserved2;
}

header nsh_t {
    bit<2>  version;
    bit<1>  oam;
    bit<1>  context;
    bit<6>  flags;
    bit<6>  length_;
    bit<8>  md_type;
    bit<8>  next_proto;
    bit<24> spath;
    bit<8>  sindex;
    bit<32> network_platform;
    bit<32> network_shared;
    bit<32> service_platform;
    bit<32> service_shared;
}

header roce_v2_header_t {
    bit<96> ib_bth;
}

header vxlan_gpe_t {
    bit<2>  flags_reserved;
    bit<2>  flags_version;
    bit<1>  flags_i;
    bit<1>  flags_p;
    bit<1>  flags_reserved2;
    bit<1>  flags_o;
    bit<16> reserved;
    bit<8>  next_proto;
    bit<24> vni;
    bit<8>  reserved2;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
    varbit<320> options;
}

header ipv6_t {
    bit<4>   version;
    bit<8>   trafficClass;
    bit<20>  flowLabel;
    bit<16>  payloadLen;
    bit<8>   nextHdr;
    bit<8>   hopLimit;
    bit<128> srcAddr;
    bit<128> dstAddr;
}

header ipv6exhdr_up_to_hdrextlen_only_t {
    bit<8>   nextHdr;
    bit<8>   hdrExtLen;
}

header ipv6exhdr_hopbyhop_t {
    bit<8>   nextHdr;
    bit<8>   hdrExtLen;
    varbit<240> options;
}

header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

header udp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<16> length;
    bit<16> checksum;
}

struct metadata {
    @name("fwd_metadata") 
    fwd_metadata_t fwd_metadata;
    @name("l3_metadata") 
    l3_metadata_t  l3_metadata;
}

struct headers {
    @name("pie_header")
    pie_t pie_header;
    @name("ethernet") 
    ethernet_t ethernet;
    @name("vntag") 
    vntag_t vntag;
    @name("vlan_tag_0") 
    vlan_tag_t vlan_tag_0;
    @name("cmd_pt1") 
    cisco_cmd_pt1_header_t cmd_pt1;
    @name("cmd_pt2") 
    cisco_cmd_pt2_header_t cmd_pt2;
    @name("cmd_pt3") 
    cisco_cmd_pt3_header_t cmd_pt3;
    @name("llc_header") 
    llc_header_t llc_header;
    @name("snap_header") 
    snap_header_t snap_header;
    @name("roce") 
    roce_header_t roce;
    @name("fcoe") 
    fcoe_header_t fcoe;
    @name("ipv6") 
    ipv6_t     ipv6;
    @name("ipv6_hopbyhop_0")
    ipv6exhdr_hopbyhop_t ipv6_hopbyhop_0;
    @name("ipv6_hopbyhop_1")
    ipv6exhdr_hopbyhop_t ipv6_hopbyhop_1;
    @name("ipv4") 
    ipv4_t     ipv4;
    @name("gre") 
    gre_t gre;
    @name("nvgre") 
    nvgre_t nvgre;
    @name("udp") 
    udp_t      udp;
    @name("vxlan_gpe") 
    vxlan_gpe_t vxlan_gpe;
    @name("nsh") 
    nsh_t nsh;
    @name("roce_v2") 
    roce_v2_header_t roce_v2;
    @name("geneve") 
    geneve_t geneve;
    @name("vxlan") 
    vxlan_t vxlan;
    @name("tcp") 
    tcp_t      tcp;
}

headers() hdr;
metadata() meta;
standard_metadata_t() standard_metadata;

parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    @name("parse_pie") state parse_pie {
        packet.extract(hdr.pie_header);
        transition parse_ethernet;
    }
    @name("parse_ethernet") state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            16w0x564E: parse_vntag;
            16w0x8100: parse_vlan;

            16w0x8909: parse_cmd_pt1;
            
            16w0x0400: parse_llc_header;
            16w0x0800: parse_ipv4; 
            16w0x86dd: parse_ipv6; 
            16w0x8906: parse_fcoe; 
            16w0x8915: parse_roce;
            default: accept;
        }
    }

    @name("parse_vntag") state parse_vntag {
        packet.extract(hdr.vntag);
        transition select(hdr.vntag.etherType) {
            16w0x8100: parse_vlan;
            
            16w0x8909: parse_cmd_pt1;
            
            16w0x0400: parse_llc_header;
            16w0x0800: parse_ipv4; 
            16w0x86dd: parse_ipv6; 
            16w0x8906: parse_fcoe; 
            16w0x8915: parse_roce;
            default: accept;
        }
    }

    @name("parse_vlan") state parse_vlan {
        packet.extract(hdr.vlan_tag_0);
        transition select(hdr.vlan_tag_0.etherType) {
            
            16w0x8909: parse_cmd_pt1;
            
            16w0x0400: parse_llc_header;
            16w0x0800: parse_ipv4; 
            16w0x86dd: parse_ipv6; 
            16w0x8906: parse_fcoe; 
            16w0x8915: parse_roce;
            default: accept;
        }
    }

    state parse_cmd_pt1 {
        packet.extract(hdr.cmd_pt1);
        transition select(hdr.cmd_pt1.length_) {
            8w0x0: parse_cmd_pt2;
            default: accept;
        }
    }
    state parse_cmd_pt2 {
        packet.extract(hdr.cmd_pt2,(bit<32>) (4 * (bit<9>) hdr.cmd_pt1.length_));
        transition parse_cmd_pt3;
    }

    state parse_cmd_pt3 {
        packet.extract(hdr.cmd_pt3);
        transition select(hdr.cmd_pt3.etherType) {
            
            16w0x0400: parse_llc_header;
            16w0x0800: parse_ipv4; 
            16w0x86dd: parse_ipv6; 
            16w0x8906: parse_fcoe; 
            16w0x8915: parse_roce;
            default: accept;
        }
    }

    state parse_llc_header {
        packet.extract(hdr.llc_header);
        transition select(hdr.llc_header.dsap, hdr.llc_header.ssap) {
            (8w0xaa, 8w0xaa): parse_snap_header;
            default: accept;
        }
    }
    state parse_snap_header {
        packet.extract(hdr.snap_header);
        transition select(hdr.snap_header.type_) {
            16w0x0800: parse_ipv4; 
            16w0x86dd: parse_ipv6; 
            16w0x8906: parse_fcoe; 
            16w0x8915: parse_roce;
            default: accept;
        }
    }

    @name("parse_ipv4") state parse_ipv4 {
        packet.extract(hdr.ipv4,(bit<32>) (4 * ((bit<9>) (packet.lookahead<ipv4_up_to_ihl_only_h>().ihl))));
        transition select(hdr.ipv4.fragOffset, hdr.ipv4.protocol) {
            (13w0x0, 8w0x6): parse_tcp;
            (13w0x0, 8w0x11): parse_udp;
            (13w0x0, 8w0x2f): parse_gre;
            default: accept;
        }
    }
    @name("parse_ipv6") state parse_ipv6 {
        packet.extract(hdr.ipv6);
        transition select(hdr.ipv6.nextHdr) {
            8w0x0: parse_ipv6ext_hopbyhop_0;
            8w0x6: parse_tcp;
            8w0x11: parse_udp;
            8w0x2f: parse_gre;
            default: accept;
        }
    }

    state parse_ipv6ext_hopbyhop_0 {
        packet.extract(hdr.ipv6_hopbyhop_0,(bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6));
        transition select (hdr.ipv6_hopbyhop_0.nextHdr) {
            8w0x0: parse_ipv6ext_hopbyhop_1;
            8w0x6: parse_tcp;
            8w0x11: parse_udp;
            8w0x2f: parse_gre;
            default: accept;
        }
    }

    state parse_ipv6ext_hopbyhop_1 {
        packet.extract(hdr.ipv6_hopbyhop_1,(bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6));
        transition select (hdr.ipv6_hopbyhop_1.nextHdr) {
            
            8w0x6: parse_tcp;
            8w0x11: parse_udp;
            8w0x2f: parse_gre;
            default: accept;
        }
    }

    state parse_fcoe {
        packet.extract(hdr.fcoe);
        transition accept;
    }
    state parse_roce {
        packet.extract(hdr.roce);
        transition accept;
    }

    @name("parse_tcp") state parse_tcp {
        packet.extract(hdr.tcp);
        meta.l3_metadata.lkp_l4_sport = hdr.tcp.srcPort;
        meta.l3_metadata.lkp_l4_dport = hdr.tcp.dstPort;
        transition accept;
    }
    @name("parse_udp") state parse_udp {
        packet.extract(hdr.udp);
        meta.l3_metadata.lkp_l4_sport = hdr.udp.srcPort;
        meta.l3_metadata.lkp_l4_dport = hdr.udp.dstPort;
        
        transition select(hdr.udp.dstPort) {
            16w0x12b5: parse_vxlan;
            16w0x17c1: parse_geneve;
            
            16w0x5ba0: parse_roce_v2;
            16w0x12b6: parse_vxlan_gpe;
            default: accept;
        }
    }
state parse_gre {
        packet.extract(hdr.gre);
        
        transition select(hdr.gre.proto){
            16w0x6558: parse_nvgre;
            default: accept;
        }
    }
    state parse_nvgre {
        packet.extract(hdr.nvgre);
        
        transition accept;
    }

    state parse_vxlan {
        packet.extract(hdr.vxlan);
        
        transition accept;
    }

    state parse_geneve {
        packet.extract(hdr.geneve);
        
        transition accept;
    }

    state parse_roce_v2 {
        packet.extract(hdr.roce_v2);
        transition accept;
    }

    state parse_vxlan_gpe {
        packet.extract(hdr.vxlan_gpe);
        transition select(hdr.vxlan_gpe.next_proto) {
            
            8w0x04: parse_nsh;
            default: accept;
        }
    }
    state parse_nsh {
        packet.extract(hdr.nsh);
        
        transition accept;
    }

    @name("start") state start {
        transition parse_pie;
    }
}

control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    @name("NoAction") action NoAction() {
{
{
}

}
}

    @name("action1") action action1(bit<24> ptr) {
{
{
meta.fwd_metadata.l2ptr=ptr;
}

}
}

    @name("action2") action action2(bit<24> bd) {
{
{
meta.fwd_metadata.out_bd=bd;
}

}
}

    @name("action3") action action3(bit<32> dst_adr) {
{
{
hdr.ipv4.dstAddr=dst_adr;
}

}
}

    @name("action4") action action4(bit<32> src_adr) {
{
{
hdr.ipv4.srcAddr=src_adr;
}

}
}

    @name("action5") action action5(bit<16> ipv6_payloadLen) {
{
{
hdr.ipv6.payloadLen=ipv6_payloadLen;
}

}
}

    @name("action6") action action6(bit<16> tcp_srcPort) {
{
{
hdr.tcp.srcPort=tcp_srcPort;
}

}
}

    @name("action7") action action7(bit<16> udp_srcPort) {
{
{
hdr.udp.srcPort=udp_srcPort;
}

}
}


    @name("table1") table table1 {
        actions = {
            action1;
            @default_only NoAction;
        }
        key = {
            hdr.ethernet.dstAddr: ternary;
        }
        default_action = NoAction();
    }
    @name("table2") table table2 {
        actions = {
            action2;
            @default_only NoAction;
        }
        key = {
            hdr.ethernet.srcAddr: ternary;
        }
        default_action = NoAction();
    }
    @name("table3") table table3 {
        actions = {
            action3;
            @default_only NoAction;
        }
        key = {
            meta.fwd_metadata.l2ptr: ternary;
        }
        default_action = NoAction();
    }
    @name("table4") table table4 {
        actions = {
            action4;
            @default_only NoAction;
        }
        key = {
            meta.fwd_metadata.out_bd: ternary;
        }
        default_action = NoAction();
    }
    @name("table5") table table5 {
        actions = {
            action5;
            @default_only NoAction;
        }
        key = {
            hdr.ethernet.srcAddr: ternary;
        }
        default_action = NoAction();
    }
    @name("table6") table table6 {
        actions = {
            action6;
            @default_only NoAction;
        }
        key = {
            hdr.ethernet.srcAddr: ternary;
        }
        default_action = NoAction();
    }
    @name("table7") table table7 {
        actions = {
            action7;
            @default_only NoAction;
        }
        key = {
            hdr.ethernet.srcAddr: ternary;
        }
        default_action = NoAction();
    }
    apply {
{
table1.apply();
table2.apply();
if(hdr.ipv4.isValid()){
bit t1;
t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr;
bit t2;
t2 = hdr.ipv4.isValid()&&t1;
if(t2){
table3.apply();
}

table4.apply();
}

if(hdr.ipv6.isValid()){
table5.apply();
}

if(hdr.tcp.isValid()){
table6.apply();
}

if(hdr.udp.isValid()){
table7.apply();
}

}
}

}

control DeparserImpl(packet_out packet, in headers hdr) {
    apply {
{
packet.emit(hdr.ethernet);
packet.emit(hdr.ipv4);
packet.emit(hdr.tcp);
}
}

}

control verifyChecksum(in headers hdr, inout metadata meta) {
    apply {
{
}
}

}

control computeChecksum(inout headers hdr, inout metadata meta) {
    apply {
{
}
}

}

V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;

INFO  - allocating memory in MemoryManager
INFO  - total number of isValid symbols is 24
INFO  - First isValid member = hdr.pie_header.isValid
INFO  - Last isValid member = hdr.tcp.isValid
INFO  - done with MemoryManager
INFO  - Building CFG
INFO  - Getting Program Order
INFO  - V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - meta.fwd_metadata.l2ptr=ptr;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - meta.fwd_metadata.out_bd=bd;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr;
INFO  - t2 = hdr.ipv4.isValid()&&t1;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - hdr.ipv4.dstAddr=dst_adr;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - hdr.ipv4.srcAddr=src_adr;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - hdr.ipv6.payloadLen=ipv6_payloadLen;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - hdr.tcp.srcPort=tcp_srcPort;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - hdr.udp.srcPort=udp_srcPort;
WARN  - Returning Null for extendedContext
WARN  - Returning Null for extendedContext
INFO  - Found Dependency: t1 and t1
INFO  - Found Dependency: t2 and t2
INFO  - Found Dependency: meta.fwd_metadata.l2ptr and meta.fwd_metadata.l2ptr
INFO  - Found Dependency: meta.fwd_metadata.out_bd and meta.fwd_metadata.out_bd
INFO  - t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr->t2 = hdr.ipv4.isValid && t1
INFO  - t2 = hdr.ipv4.isValid && t1->MATCH NODE: table3
INFO  - MATCH NODE: table1->MATCH NODE: table3
INFO  - MATCH NODE: table2->MATCH NODE: table4
INFO  - MATCH NODE: table1
INFO  - MATCH NODE: table2
INFO  - t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr
INFO  - MATCH NODE: table5
INFO  - MATCH NODE: table6
INFO  - MATCH NODE: table7
INFO  - t2 = hdr.ipv4.isValid && t1
INFO  - MATCH NODE: table4
INFO  - MATCH NODE: table3
INFO  - Total Number of Parallel nodes = 3
INFO  - Key Element,hdr.ethernet.dstAddr:hdr.ethernet.dstAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,meta.fwd_metadata.l2ptr:meta.fwd_metadata.l2ptr
INFO  - Key Element,meta.fwd_metadata.out_bd:meta.fwd_metadata.out_bd
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - KeyMeta = [1:[hdr.ethernet.dstAddr],2:[hdr.ethernet.srcAddr],3:[meta.fwd_metadata.l2ptr],4:[meta.fwd_metadata.out_bd],5:[hdr.ethernet.srcAddr],6:[hdr.ethernet.srcAddr],7:[hdr.ethernet.srcAddr]]
[1:table1,2:table2,3:table3,4:table4,5:table5,6:table6,7:table7]

INFO  - Found Dependency: t1 and t1
INFO  - Found Dependency: t2 and t2
INFO  - Found Dependency: meta.fwd_metadata.l2ptr and meta.fwd_metadata.l2ptr
INFO  - Found Dependency: meta.fwd_metadata.out_bd and meta.fwd_metadata.out_bd
INFO  - # of nodes = 16
INFO  - # of edges = 11
INFO  - # of matches = 7
INFO  - # of actions = 9
INFO  - Match unit size = 80
INFO  - # of match units = 3
INFO  - Match unit limit = 8
INFO  - max size of match key in program = 48
INFO  - max size of match key in hw = 640
INFO  - # of action fields = 9
INFO  - action fields limit = 32
INFO  - max number of action fields in program = 1
INFO  - max number of action fields in hw = 32
INFO  - match proc limit = 1
INFO  - action proc limit = 1
INFO  - Upper bound on throughput = 2.6666666666666665
INFO  - Q_MAX = 29
INFO  - R_MAX = 4
INFO  - Running DRMT ILP Solver
INFO  - Adding constraint: unique quotient(q) and reminder(r)
INFO  - Adding constraint: t[v] can be represted as q*P + r
INFO  - Adding constraint: delay constraints
INFO  - Adding constraint: number of matches does not exceed match unit limit
INFO  - Adding constraint: number of matches does not exceed data unit limit
INFO  - Adding constraint: availability of different types of ALUs at action block level
INFO  - Adding constraint: IPC constraint
INFO  - Adding constraint: In a cycle either match or action can be scheduled per processor per context
INFO  - Adding constraint: In a cycle either alu_action or p4_action can be scheduled per processor per context
INFO  - Adding constraint: scratch space in round robin mode
INFO  - CPLEX solving...
INFO  - Time taken by cplex to solve (hh:mm:ss) = 00:00:20
INFO  - 
Schedule
|                      t=0|
|             table2_MATCH|
|             table1_MATCH|
|-------------------------|
|                      t=1|
|-------------------------|
|                      t=2|
|-------------------------|
|                      t=3|
|-------------------------|
|                      t=4|
|t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr_13|
|-------------------------|
|                      t=5|
|-------------------------|
|                      t=6|
|-------------------------|
|                      t=7|
|-------------------------|
|                      t=8|
|-------------------------|
|                      t=9|
|-------------------------|
|                     t=10|
|-------------------------|
|                     t=11|
|-------------------------|
|                     t=12|
|-------------------------|
|                     t=13|
|-------------------------|
|                     t=14|
|-------------------------|
|                     t=15|
|-------------------------|
|                     t=16|
|-------------------------|
|                     t=17|
|-------------------------|
|                     t=18|
|-------------------------|
|                     t=19|
|-------------------------|
|                     t=20|
|-------------------------|
|                     t=21|
|-------------------------|
|                     t=22|
|-------------------------|
|                     t=23|
|-------------------------|
|                     t=24|
|-------------------------|
|                     t=25|
|-------------------------|
|                     t=26|
|-------------------------|
|                     t=27|
|-------------------------|
|                     t=28|
|-------------------------|
|                     t=29|
|t2 = hdr.ipv4.isValid && t1_10|
|-------------------------|
|                     t=30|
|            table2_ACTION|
|            table1_ACTION|
|-------------------------|
|                     t=31|
|-------------------------|
|                     t=32|
|-------------------------|
|                     t=33|
|-------------------------|
|                     t=34|
|-------------------------|
|                     t=35|
|-------------------------|
|                     t=36|
|-------------------------|
|                     t=37|
|-------------------------|
|                     t=38|
|-------------------------|
|                     t=39|
|-------------------------|
|                     t=40|
|-------------------------|
|                     t=41|
|-------------------------|
|                     t=42|
|-------------------------|
|                     t=43|
|-------------------------|
|                     t=44|
|-------------------------|
|                     t=45|
|             table6_MATCH|
|             table3_MATCH|
|             table7_MATCH|
|             table4_MATCH|
|             table5_MATCH|
|-------------------------|
|                     t=46|
|-------------------------|
|                     t=47|
|-------------------------|
|                     t=48|
|-------------------------|
|                     t=49|
|-------------------------|
|                     t=50|
|-------------------------|
|                     t=51|
|-------------------------|
|                     t=52|
|-------------------------|
|                     t=53|
|-------------------------|
|                     t=54|
|-------------------------|
|                     t=55|
|-------------------------|
|                     t=56|
|-------------------------|
|                     t=57|
|-------------------------|
|                     t=58|
|-------------------------|
|                     t=59|
|-------------------------|
|                     t=60|
|-------------------------|
|                     t=61|
|-------------------------|
|                     t=62|
|-------------------------|
|                     t=63|
|-------------------------|
|                     t=64|
|-------------------------|
|                     t=65|
|-------------------------|
|                     t=66|
|-------------------------|
|                     t=67|
|-------------------------|
|                     t=68|
|-------------------------|
|                     t=69|
|-------------------------|
|                     t=70|
|-------------------------|
|                     t=71|
|-------------------------|
|                     t=72|
|-------------------------|
|                     t=73|
|-------------------------|
|                     t=74|
|-------------------------|
|                     t=75|
|            table6_ACTION|
|            table3_ACTION|
|            table7_ACTION|
|            table4_ACTION|
|            table5_ACTION|
|-------------------------|

INFO  - 
Modulo Schedule
|                      t=0|
|             table2_MATCH|
|             table1_MATCH|
|t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr_13|
|-------------------------|
|                      t=1|
|             table6_MATCH|
|             table3_MATCH|
|             table7_MATCH|
|t2 = hdr.ipv4.isValid && t1_10|
|             table4_MATCH|
|             table5_MATCH|
|-------------------------|
|                      t=2|
|            table2_ACTION|
|            table1_ACTION|
|-------------------------|
|                      t=3|
|            table6_ACTION|
|            table3_ACTION|
|            table7_ACTION|
|            table4_ACTION|
|            table5_ACTION|
|-------------------------|

INFO  - 
Modulo Schedule Packets Ago
|                      t=0|
|        p[0].table2_MATCH|
|        p[0].table1_MATCH|
|p[1].t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr_13|
|-------------------------|
|                      t=1|
|       p[11].table6_MATCH|
|       p[11].table3_MATCH|
|       p[11].table7_MATCH|
|p[7].t2 = hdr.ipv4.isValid && t1_10|
|       p[11].table4_MATCH|
|       p[11].table5_MATCH|
|-------------------------|
|                      t=2|
|       p[7].table2_ACTION|
|       p[7].table1_ACTION|
|-------------------------|
|                      t=3|
|      p[18].table6_ACTION|
|      p[18].table3_ACTION|
|      p[18].table7_ACTION|
|      p[18].table4_ACTION|
|      p[18].table5_ACTION|
|-------------------------|

INFO  - 
Modulo Action Fields Consume by Alu Type
|                      t=0|
|       COMPLEX_BYTE_ALU:1|
|-------------------------|
|                      t=1|
|                BIT_ALU:1|
|-------------------------|
|                      t=2|
|       COMPLEX_BYTE_ALU:2|
|-------------------------|
|                      t=3|
|       COMPLEX_BYTE_ALU:5|
|-------------------------|

INFO  - 
Disjoint Matches across processors
|                      b=0|
|             table2_MATCH|
|             table1_MATCH|
|             table6_MATCH|
|             table3_MATCH|
|             table7_MATCH|
|             table4_MATCH|
|             table5_MATCH|
|-------------------------||-------------------------||-------------------------||-------------------------|

INFO  - 
Match units consumed in a modulo cycle
    t=00    |    t=01    |    t=02    |    t=03    |
      02    |      05    |      00    |      00    |


INFO  - 
Scratch Data Units consumed
    t=00    |    t=01    |    t=02    |    t=03    |    t=04    |    t=05    |    t=06    |    t=07    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=08    |    t=09    |    t=10    |    t=11    |    t=12    |    t=13    |    t=14    |    t=15    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=16    |    t=17    |    t=18    |    t=19    |    t=20    |    t=21    |    t=22    |    t=23    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=24    |    t=25    |    t=26    |    t=27    |    t=28    |    t=29    |    t=30    |    t=31    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=32    |    t=33    |    t=34    |    t=35    |    t=36    |    t=37    |    t=38    |    t=39    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=40    |    t=41    |    t=42    |    t=43    |    t=44    |    t=45    |    t=46    |    t=47    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=48    |    t=49    |    t=50    |    t=51    |    t=52    |    t=53    |    t=54    |    t=55    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=56    |    t=57    |    t=58    |    t=59    |    t=60    |    t=61    |    t=62    |    t=63    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=64    |    t=65    |    t=66    |    t=67    |    t=68    |    t=69    |    t=70    |    t=71    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=72    |    t=73    |    t=74    |    t=75    |    t=76    |    t=77    |    t=78    |    t=79    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=80    |    t=81    |    t=82    |    t=83    |    t=84    |    t=85    |    t=86    |    t=87    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=88    |    t=89    |    t=90    |    t=91    |    t=92    |    t=93    |    t=94    |    t=95    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=96    |    t=97    |    t=98    |    t=99    |    t=100    |    t=101    |    t=102    |    t=103    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=104    |    t=105    |    t=106    |    t=107    |    t=108    |    t=109    |    t=110    |    t=111    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=112    |    t=113    |    t=114    |    t=115    |    t=116    |    t=117    |    t=118    |    t=119    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=120    |    t=121    |    t=122    |    t=123    |    t=124    |    t=125    |    t=126    |    t=127    |
      00    |      00    |      00    |      00    |      00    |      00    |      00    |      00    |

    t=128    |    t=129    |
      00    |      00    |


INFO  - allocating memory in MemoryManager
INFO  - total number of isValid symbols is 24
INFO  - First isValid member = hdr.pie_header.isValid
INFO  - Last isValid member = hdr.tcp.isValid
INFO  - done with MemoryManager
INFO  - At Mod [0]:[M:[2,1],Actions,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP]
INFO  - At Mod [1]:[NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,Actions,NOOP,NOOP,NOOP,M:[6,3,7,4,5],NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP]
INFO  - At Mod [2]:[NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,A:[2,1],NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP]
INFO  - At Mod [3]:[NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,A:[6,3,7,4,5],NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP,NOOP]
INFO  - [[2,1],[6,3,7,4,5],[]]
INFO  - Table Id = 1, SOM = 0, SEG =1
INFO  - Table Id = 2, SOM = 0, SEG =0
INFO  - Table Id = 3, SOM = 0, SEG =1
INFO  - Table Id = 4, SOM = 0, SEG =3
INFO  - Table Id = 5, SOM = 0, SEG =4
INFO  - Table Id = 6, SOM = 0, SEG =0
INFO  - Table Id = 7, SOM = 0, SEG =2
INFO  - Total Schedule length = 89
INFO  - InstructionPtr = 0, ActionIndex = 0, ALUID = 0, Operation = t1 = hdr.ipv4.srcAddr != hdr.ipv4.dstAddr
INFO  - InstructionPtr = 1, ActionIndex = 1, ALUID = 0, Operation = t2 = hdr.ipv4.isValid && t1
INFO  - Row: 1t2 = hdr.ipv4.isValid && t1
INFO  - table2 with id 2
INFO  - 1
INFO  - [meta.fwd_metadata.out_bd = bd]
INFO  - TableId = 2, InstructionPtr = 2, ActionIndex = 2, ALUID = 0, Operation = meta.fwd_metadata.out_bd = bd
INFO  - table1 with id 1
INFO  - 1
INFO  - [meta.fwd_metadata.l2ptr = ptr]
INFO  - TableId = 1, InstructionPtr = 2, ActionIndex = 2, ALUID = 1, Operation = meta.fwd_metadata.l2ptr = ptr
INFO  - table6 with id 6
INFO  - 1
INFO  - [hdr.tcp.srcPort = tcp_srcPort]
INFO  - TableId = 6, InstructionPtr = 3, ActionIndex = 3, ALUID = 0, Operation = hdr.tcp.srcPort = tcp_srcPort
INFO  - table3 with id 3
INFO  - 1
INFO  - [hdr.ipv4.dstAddr = dst_adr]
INFO  - TableId = 3, InstructionPtr = 3, ActionIndex = 3, ALUID = 1, Operation = hdr.ipv4.dstAddr = dst_adr
INFO  - table7 with id 7
INFO  - 1
INFO  - [hdr.udp.srcPort = udp_srcPort]
INFO  - TableId = 7, InstructionPtr = 3, ActionIndex = 3, ALUID = 2, Operation = hdr.udp.srcPort = udp_srcPort
INFO  - table4 with id 4
INFO  - 1
INFO  - [hdr.ipv4.srcAddr = src_adr]
INFO  - TableId = 4, InstructionPtr = 3, ActionIndex = 3, ALUID = 3, Operation = hdr.ipv4.srcAddr = src_adr
INFO  - table5 with id 5
INFO  - 1
INFO  - [hdr.ipv6.payloadLen = ipv6_payloadLen]
INFO  - TableId = 5, InstructionPtr = 3, ActionIndex = 3, ALUID = 4, Operation = hdr.ipv6.payloadLen = ipv6_payloadLen
INFO  - %%%
INFO  - [0:[2,1],1:[6,3,7,4,5]]
INFO  - Building Headers for Parser Config
INFO  - Generating keygen configs
INFO  - (bit<32>) (4 * (bit<9>) hdr.cmd_pt1.length_)
INFO  - hdr.cmd_pt1.length_
INFO  - Index backwards: 17
INFO  - hdr.cmd_pt1.length_
INFO  - (bit<32>) (4 * ((bit<9>) (packet.lookahead<ipv4_up_to_ihl_only_h>().ihl)))
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - (bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6)
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - Found expression of format a*x + b
INFO  - a = 8, b = 6, x = ipv6exhdr_up_to_hdrextlen_only_t.hdrExtLen
INFO  - (bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6)
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - Found expression of format a*x + b
INFO  - a = 8, b = 6, x = ipv6exhdr_up_to_hdrextlen_only_t.hdrExtLen
INFO  - parse_pie
INFO  - parse_ethernet
INFO  - hdr.ethernet.etherType[96,16],16w0x564E
INFO  - hdr.ethernet.etherType[96,16],16w0x8100
INFO  - hdr.ethernet.etherType[96,16],16w0x8909
INFO  - hdr.ethernet.etherType[96,16],16w0x0400
INFO  - hdr.ethernet.etherType[96,16],16w0x0800
INFO  - hdr.ethernet.etherType[96,16],16w0x86dd
INFO  - hdr.ethernet.etherType[96,16],16w0x8906
INFO  - hdr.ethernet.etherType[96,16],16w0x8915
INFO  - hdr.ethernet.etherType[96,16],default
INFO  - parse_vntag
INFO  - hdr.vntag.etherType[32,16],16w0x8100
INFO  - hdr.vntag.etherType[32,16],16w0x8909
INFO  - hdr.vntag.etherType[32,16],16w0x0400
INFO  - hdr.vntag.etherType[32,16],16w0x0800
INFO  - hdr.vntag.etherType[32,16],16w0x86dd
INFO  - hdr.vntag.etherType[32,16],16w0x8906
INFO  - hdr.vntag.etherType[32,16],16w0x8915
INFO  - hdr.vntag.etherType[32,16],default
INFO  - parse_vlan
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x8909
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x0400
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x0800
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x86dd
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x8906
INFO  - hdr.vlan_tag_0.etherType[16,16],16w0x8915
INFO  - hdr.vlan_tag_0.etherType[16,16],default
INFO  - parse_cmd_pt1
INFO  - hdr.cmd_pt1.length_[8,8],8w0x0
INFO  - hdr.cmd_pt1.length_[8,8],default
INFO  - parse_llc_header
INFO  - hdr.llc_header.ssap[8,8],8w0xaa
INFO  - hdr.llc_header.dsap[0,8],8w0xaa
INFO  - parse_ipv4
INFO  - hdr.ipv4.protocol[72,8],8w0x6
INFO  - hdr.ipv4.fragOffset[51,13],13w0x0
INFO  - hdr.ipv4.protocol[72,8],8w0x11
INFO  - hdr.ipv4.fragOffset[51,13],13w0x0
INFO  - hdr.ipv4.protocol[72,8],8w0x2f
INFO  - hdr.ipv4.fragOffset[51,13],13w0x0
INFO  - parse_ipv6
INFO  - hdr.ipv6.nextHdr[48,8],8w0x0
INFO  - hdr.ipv6.nextHdr[48,8],8w0x6
INFO  - hdr.ipv6.nextHdr[48,8],8w0x11
INFO  - hdr.ipv6.nextHdr[48,8],8w0x2f
INFO  - hdr.ipv6.nextHdr[48,8],default
INFO  - parse_fcoe
INFO  - parse_roce
INFO  - accept
INFO  - parse_cmd_pt2
INFO  - parse_cmd_pt3
INFO  - hdr.cmd_pt3.etherType[0,16],16w0x0400
INFO  - hdr.cmd_pt3.etherType[0,16],16w0x0800
INFO  - hdr.cmd_pt3.etherType[0,16],16w0x86dd
INFO  - hdr.cmd_pt3.etherType[0,16],16w0x8906
INFO  - hdr.cmd_pt3.etherType[0,16],16w0x8915
INFO  - hdr.cmd_pt3.etherType[0,16],default
INFO  - parse_snap_header
INFO  - hdr.snap_header.type_[24,16],16w0x0800
INFO  - hdr.snap_header.type_[24,16],16w0x86dd
INFO  - hdr.snap_header.type_[24,16],16w0x8906
INFO  - hdr.snap_header.type_[24,16],16w0x8915
INFO  - hdr.snap_header.type_[24,16],default
INFO  - parse_tcp
INFO  - parse_udp
INFO  - hdr.udp.dstPort[16,16],16w0x12b5
INFO  - hdr.udp.dstPort[16,16],16w0x17c1
INFO  - hdr.udp.dstPort[16,16],16w0x5ba0
INFO  - hdr.udp.dstPort[16,16],16w0x12b6
INFO  - hdr.udp.dstPort[16,16],default
INFO  - parse_gre
INFO  - hdr.gre.proto[16,16],16w0x6558
INFO  - hdr.gre.proto[16,16],default
INFO  - parse_ipv6ext_hopbyhop_0
INFO  - hdr.ipv6_hopbyhop_0.nextHdr[0,8],8w0x0
INFO  - hdr.ipv6_hopbyhop_0.nextHdr[0,8],8w0x6
INFO  - hdr.ipv6_hopbyhop_0.nextHdr[0,8],8w0x11
INFO  - hdr.ipv6_hopbyhop_0.nextHdr[0,8],8w0x2f
INFO  - hdr.ipv6_hopbyhop_0.nextHdr[0,8],default
INFO  - parse_ipv6ext_hopbyhop_1
INFO  - hdr.ipv6_hopbyhop_1.nextHdr[0,8],8w0x6
INFO  - hdr.ipv6_hopbyhop_1.nextHdr[0,8],8w0x11
INFO  - hdr.ipv6_hopbyhop_1.nextHdr[0,8],8w0x2f
INFO  - hdr.ipv6_hopbyhop_1.nextHdr[0,8],default
INFO  - parse_vxlan
INFO  - parse_geneve
INFO  - parse_roce_v2
INFO  - parse_vxlan_gpe
INFO  - hdr.vxlan_gpe.next_proto[24,8],8w0x04
INFO  - hdr.vxlan_gpe.next_proto[24,8],default
INFO  - parse_nvgre
INFO  - parse_nsh
INFO  - start
INFO  - Starting Parser config Generation
INFO  - Starting Extractor config Generation
INFO  - field = hdr.pie_header.pie_word0 = 352,0
INFO  - field = hdr.pie_header.pie_word1 = 384,32
INFO  - field = hdr.pie_header.pie_word2 = 416,64
INFO  - field = hdr.pie_header.pie_word3 = 448,96
INFO  - field = hdr.pie_header.pie_word4 = 480,128
INFO  - field = hdr.pie_header.pie_word5 = 512,160
INFO  - field = hdr.pie_header.pie_word6 = 544,192
INFO  - field = hdr.pie_header.pie_word7 = 576,224
INFO  - Number of fields to extract for pie_t = 32
INFO  - field = hdr.ethernet.dstAddr = 224,0
INFO  - field = hdr.ethernet.srcAddr = 288,48
INFO  - Number of fields to extract for ethernet_t = 12
INFO  - Number of fields to extract for vntag_t = 0
INFO  - Number of fields to extract for vlan_tag_t = 0
INFO  - field = hdr.cmd_pt1.length_ = 8,8
INFO  - Number of fields to extract for cisco_cmd_pt1_header_t = 1
INFO  - Number of fields to extract for llc_header_t = 0
INFO  - field = hdr.ipv4.ihl = 0,4
INFO  - field = hdr.ipv4.srcAddr = 192,96
INFO  - field = hdr.ipv4.dstAddr = 160,128
INFO  - Number of fields to extract for ipv4_t = 9
INFO  - field = hdr.ipv6.payloadLen = 32,32
INFO  - Number of fields to extract for ipv6_t = 2
INFO  - Number of fields to extract for fcoe_header_t = 0
INFO  - Number of fields to extract for roce_header_t = 0
INFO  - Number of fields to extract for cisco_cmd_pt2_header_t = 0
INFO  - Number of fields to extract for cisco_cmd_pt3_header_t = 0
INFO  - Number of fields to extract for snap_header_t = 0
INFO  - field = hdr.tcp.srcPort = 48,0
INFO  - Number of fields to extract for tcp_t = 2
INFO  - field = hdr.udp.srcPort = 64,0
INFO  - Number of fields to extract for udp_t = 2
INFO  - Number of fields to extract for gre_t = 0
INFO  - field = hdr.ipv6_hopbyhop_0.hdrExtLen = 16,8
INFO  - Number of fields to extract for ipv6exhdr_hopbyhop_t = 1
INFO  - field = hdr.ipv6_hopbyhop_1.hdrExtLen = 24,8
INFO  - Number of fields to extract for ipv6exhdr_hopbyhop_t = 1
INFO  - Number of fields to extract for vxlan_t = 0
INFO  - Number of fields to extract for geneve_t = 0
INFO  - Number of fields to extract for roce_v2_header_t = 0
INFO  - Number of fields to extract for vxlan_gpe_t = 0
INFO  - Number of fields to extract for nvgre_t = 0
INFO  - Number of fields to extract for nsh_t = 0
INFO  - Done generating parser rows
INFO  - Done with Generating ALU configs
INFO  - *************************
INFO  - trying to parse base1.p4
WARN  - Done with base1.p4
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
ERROR - Not possible to calculate size of Externsexternpacket_out{voidemit<T>(inThdr);voidemit<T>(inboolcondition,inTdata);}
INFO  - allocating memory in MemoryManager
INFO  - total number of isValid symbols is 24
INFO  - First isValid member = hdr.pie_header.isValid
INFO  - Last isValid member = hdr.tcp.isValid
INFO  - done with MemoryManager
INFO  - 16w0x564E	14
INFO  - 16w0x8100	20
INFO  - 16w0x8909	12
INFO  - 16w0x0400	28
INFO  - 16w0x0800	8
INFO  - 16w0x86dd	30
INFO  - 16w0x8906	10
INFO  - 16w0x8915	22
INFO  - 8w0x0	3
INFO  - 4	40
INFO  - 8w0xaa	1
INFO  - 13w0x0	16
INFO  - 8w0x6	0
INFO  - 8w0x11	2
INFO  - 8w0x2f	4
INFO  - 8	36
INFO  - 6	44
INFO  - 16w0x12b5	6
INFO  - 16w0x17c1	26
INFO  - 16w0x5ba0	32
INFO  - 16w0x12b6	24
INFO  - 16w0x6558	18
INFO  - 8w0x04	5
INFO  - V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
INFO  - [ParserImpl,verifyChecksum,ingress,egress,computeChecksum,DeparserImpl]
INFO  - [verifyChecksum,ingress,computeChecksum,DeparserImpl]
INFO  - ********************
INFO  - Key Element,hdr.ethernet.dstAddr:hdr.ethernet.dstAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,meta.fwd_metadata.l2ptr:meta.fwd_metadata.l2ptr
INFO  - Key Element,meta.fwd_metadata.out_bd:meta.fwd_metadata.out_bd
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - Key Element,hdr.ethernet.srcAddr:hdr.ethernet.srcAddr
INFO  - (bit<32>) (4 * (bit<9>) hdr.cmd_pt1.length_)
INFO  - hdr.cmd_pt1.length_
INFO  - Index backwards: 17
INFO  - hdr.cmd_pt1.length_
INFO  - (bit<32>) (4 * ((bit<9>) (packet.lookahead<ipv4_up_to_ihl_only_h>().ihl)))
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - (bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6)
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - Found expression of format a*x + b
INFO  - a = 8, b = 6, x = ipv6exhdr_up_to_hdrextlen_only_t.hdrExtLen
INFO  - (bit<32>) (8 * packet.lookahead<ipv6exhdr_up_to_hdrextlen_only_t>().hdrExtLen + 6)
INFO  - com.p4.p416.gen.HeaderTypeDeclarationContextExt
INFO  - Found expression of format a*x + b
INFO  - a = 8, b = 6, x = ipv6exhdr_up_to_hdrextlen_only_t.hdrExtLen
INFO  - ingress
INFO  - computeChecksum
INFO  - verifyChecksum
INFO  - DeparserImpl
INFO  - *************
INFO  - ParserImpl
INFO  - *************
WARN  - SOM Model already initialized
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - hdr.ipv4.dstAddr_0 -> 0
hdr.ipv4.srcAddr_0 -> 1

INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - 
INFO  - *************************
INFO  - Graph Extraction completed
