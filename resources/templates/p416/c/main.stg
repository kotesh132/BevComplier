main_include()::=<<
#include \<stdio.h>
#include \<stdlib.h>
#include \<inttypes.h>
#include "headers.h"
#include "control.h"
#include "phvparser.h"
#include "phvdeparser.h"
#include "pd.h"
#include "utility.h"


>>

main_global_var(instantiations)::=<<

<instantiations : {instantiation | <instantiation.typeRef.prefixedType> <instantiation.nameString>;<\n>}>

>>

main_helper_methods()::=<<

char dataFile[64];
char dataDir[64];

char* getFilePath(char* fileName){
	strcpy(dataFile, dataDir);
	strcat(dataFile, fileName);
	return dataFile;
}

void loadPacketVector(uint8_t *phv, int byteSize){
	printf("\nLoad packet vector from iPhv.data\n");
	char *fileName = strdup(getFilePath("iPhv.data"));
	loadFromFile(fileName, phv, byteSize);
	free(fileName);
}

void loadBitPacketVector(uint8_t *phv, int byteSize){
	printf("\nLoad packet bit vector from iPhv.data\n");
	char *fileName = strdup(getFilePath("iPhvBit.data"));
	loadBitFromFile(fileName, phv, byteSize);
	free(fileName);
}

void emitPacketVector(uint8_t *phv, int byteSize){
	printf("\nEmit Packet Vector to oPhv.data\n");
	char *fileName = strdup(getFilePath("oPhv.data"));
	writeToFile(fileName, phv, byteSize);
	free(fileName);
}

void emitBitPacketVector(uint8_t *phv, int byteSize){
	printf("Emit Packet Bit Vector to oPhvBit.data\n");
	char *fileName = strdup(getFilePath("oPhvBit.data"));
	writeBitToFile(fileName, phv, byteSize);
	free(fileName);
}

void validateOutput() {
	char *fileName1 = strdup(getFilePath("vPhv.data"));
	char *fileName2 = strdup(getFilePath("oPhv.data"));
	compareFiles(fileName1, fileName2);
	free(fileName1);
	free(fileName2);
}

>>

main_fromPhv(controlMethodsApplyMap, phvParserParams, phvDeparserParams, instantiations)::=<<

void fromPhv() {
	uint8_t packet[256] = {0};
	uint8_t packetBit[256] = {0};

	<instantiations : {instantiation | <instantiation.typeRef.prefixedType> <instantiation.nameString>;<\n>}>

	loadPacketVector(packet, 256);
	loadBitPacketVector(packetBit, 32);

	parsePacketVector(<phvParserParams>);

	<controlMethodsApplyMap.keys: {k | <k>_apply(<controlMethodsApplyMap.(k)>);<\n>}>

	deParsePacketVector(<phvDeparserParams>);

	emitPacketVector(packet, 256);
	emitBitPacketVector(packetBit, 32);
}
>>

main_main()::=<<
int main(int argc, char** argv) {
	if (argc == 1){
		printf("Using current directory to find commands.txt, iPhv.data, vPhv.data, iPhvBit.data, vPhvBit.data\n");
		//strcpy(dataDir, "/Users/rrajarap/Proto/xcode/drmt/drmt/");
	}
	else if (argc == 2) {
		printf("Using %s directory to find commands.txt, iPhv.data, vPhv.data, iPhvBit.data, vPhvBit.data\n", argv[1]);
		strcpy(dataDir, argv[1]);
	}
	else {
		printf("Please provide correct either 0 or 1 parameters");
		exit(1);
	}

	loadTables(getFilePath("commands.txt"));
	fromPhv();
	validateOutput();
}

>>


top(stmts)::=<<
<stmts :{ item |<item><\n>}>
>>