grammar p416;

@header {
import com.p4.p416.gen.*;
}

p4program
    :
 	|p4program declaration
	|p4program ';'
    ;

declaration
    : constantDeclaration
    | externDeclaration
    | actionDeclaration
    | parserDeclaration
    | typeDeclaration
    | controlDeclaration
    | instantiation
    | errorDeclaration
    | matchKindDeclaration
    ;

nonTypeName
    : IDENTIFIER
    | APPLY
    | KEY
    | ACTIONS
    | STATE
    ;

name 
    : nonTypeName
    | IDENTIFIER
    | ERROR
    ;

optAnnotations
    :annotations?
    ;

annotations
    : annotation+
    ;

annotation
    : '@' name							#simpleAnnotation
    | '@' name '(' expressionList ')'	#complexAnnotation
    ;

parameterList /* empty */
    : parameter (',' parameter)*
    ;

parameter
    : optAnnotations direction? typeRef name
    ;

direction
	: IN	#inDirection
	| OUT	#outDirection
	| INOUT	#inOutDirection
	;
	
packageTypeDeclaration
    : optAnnotations PACKAGE name optTypeParameters? '(' parameterList? ')'
    ;

instantiation
    : annotations? typeRef '(' argumentList? ')' name ';'
    ;

optConstructorParameters /*empty*/
    : '(' parameterList? ')'
    ;

dotPrefix
    : '.'
    ;

/**************************** PARSER ******************************/

parserDeclaration
    : parserTypeDeclaration optConstructorParameters? '{' parserLocalElements? parserStates '}'
    ;

parserLocalElements
    : /* empty */
    parserLocalElement+
    ;

parserLocalElement
    : constantDeclaration
    | variableDeclaration
    | instantiation
    ;

parserTypeDeclaration
    : optAnnotations PARSER name optTypeParameters? '(' parameterList? ')'
    ;

parserStates
    : parserState+
    ;

parserState
    : optAnnotations STATE name '{' parserStatements? transitionStatement? '}'
    ;

parserStatements
    : /* empty */
    parserStatement+
    ;

parserStatement
    : assignmentStatement
    | methodCallStatement
    | directApplication
    | parserBlockStatement
    | constantDeclaration
    | variableDeclaration
    ;

parserBlockStatement
    : optAnnotations '{' parserStatements '}'
    ;

transitionStatement /* empty */
    :TRANSITION stateExpression
    ;

stateExpression
    : name ';'
    | selectExpression
    ;

selectExpression
    : SELECT '(' expressionList ')' '{' selectCaseList? '}'
    ;

selectCaseList /* empty */
    : 
     selectCase+
    ;

selectCase
    : keySetExpression ':' name ';'
    ;

keySetExpression
    :  tupleKeySetExpression 
  	|  simpleKeySetExpression
	;

tupleKeySetExpression	
    : '(' simpleKeySetExpression ( ',' simpleKeySetExpression )* ')'
	;

simpleKeySetExpression
    : expression
    | DEFAULT
    | DONTCARE
    | expression MASK expression
    | expression RANGE expression
    ;

/*************************** CONTROL ************************/

controlDeclaration
    : controlTypeDeclaration optConstructorParameters?
      /* no type parameters allowed in controlTypeDeclaration */
      '{' controlLocalDeclarations? APPLY controlBody '}'
    ;

controlTypeDeclaration
    : optAnnotations CONTROL name optTypeParameters?
      '(' parameterList? ')'
    ;

controlLocalDeclarations  /* empty */
    : controlLocalDeclaration+
    ;

controlLocalDeclaration
    : constantDeclaration
    | actionDeclaration
    | tableDeclaration
    | instantiation
    | variableDeclaration
    ;

controlBody
    : blockStatement
    ;

/*************************** EXTERN *************************/

externDeclaration
    : optAnnotations EXTERN nonTypeName optTypeParameters? '{' methodPrototypes? '}'	#externObjectDeclaration
    | optAnnotations EXTERN functionPrototype ';'										#externFunctionDeclaration
    ;

methodPrototypes/* empty */
    : methodPrototype+
    ;

functionPrototype
    : typeOrVoid name optTypeParameters? '(' parameterList? ')'
    ;

methodPrototype
    : functionPrototype ';'
    | IDENTIFIER '(' parameterList? ')' ';'  
    ;

/************************** TYPES ****************************/

typeRef
    : baseType
    | typeName
    | specializedType
    | headerStackType
    | tupleType
    ;

prefixedType
    : IDENTIFIER
    | dotPrefix IDENTIFIER
    | ERROR
    ;
    
typeName
    : prefixedType
    ;

tupleType
    : TUPLE '<' typeArgumentList '>'
    ;

headerStackType
    : typeName '[' expression ']'
    ;

specializedType
    : prefixedType '<' typeArgumentList '>'
    ;


baseType
	: BOOL						#boolType
	| ERROR						#errorType
	| BIT						#bitType		
	| BIT  '<'  number  '>'		#bitSizeType
	| INT  '<'  number  '>'		#intSizeType
	| VARBIT  '<'  number  '>'	#varBitSizeTtype
	;
	

typeOrVoid
    : VOID
    | typeRef
    | nonTypeName     // may be a type variable
    ;

optTypeParameters /* empty */
    : '<' typeParameterList '>'
    ;

typeParameterList
    : nonTypeName ( ',' nonTypeName) *
    ;

typeArg
    : dontcare
    | typeRef
    ;

dontcare
:DONTCARE;

typeArgumentList
    : typeArg (',' typeArg)*
    ;

typeDeclaration
    : derivedTypeDeclaration
    | typedefDeclaration
    | parserTypeDeclaration ';'
    | controlTypeDeclaration ';'
    | packageTypeDeclaration ';'
    ;

derivedTypeDeclaration
    : headerTypeDeclaration
    | headerUnionDeclaration
    | structTypeDeclaration
    | enumDeclaration
    ;

headerTypeDeclaration
    : optAnnotations HEADER name '{' structFieldList? '}'
    ;

headerUnionDeclaration
    : optAnnotations HEADER_UNION name '{' structFieldList? '}' 
    ;

structTypeDeclaration
    : optAnnotations STRUCT name '{' structFieldList? '}'
    ;

structFieldList/* empty */
    : structField+
    ;

structField
    : optAnnotations typeRef name ';'
    ;

enumDeclaration
    : optAnnotations ENUM name '{' identifierList '}'
    ;

errorDeclaration
    : ERROR '{' identifierList '}'
    ;

matchKindDeclaration
    : MATCH_KIND '{' identifierList '}'
    ;

identifierList
    : name ( ',' name )*
    ;

typedefDeclaration
    : annotations? TYPEDEF typeRef name ';'					#simpleTypeDef
    | annotations? TYPEDEF derivedTypeDeclaration name ';'	#derivedTypeDef
    ;

/*************************** STATEMENTS *************************/

assignmentStatement
    : lvalue '='  expression ';'
    ;

methodCallStatement
    : lvalue '.' APPLY '(' argumentList? ')' ';'	#applyMethodCall
    | lvalue '.' 'extract' '(' argumentList? ')' ';'	#extractMethodCall
    | lvalue '(' argumentList? ')' ';'								#callWithoutTypeArgs
    | lvalue '<' typeArgumentList '>' '(' argumentList? ')' ';'		#callWithTypeArgs
    ;

emptyStatement
    : ';'
    ;

returnStatement
    : RETURN ';'
    ;

exitStatement
    : EXIT ';'
    ;

conditionalStatement
    : IF '(' expression ')' statement					#ifStatement
    | IF '(' expression ')' statement ELSE statement	#ifElseStatement
    ;

/*To support direct invocation of a control or parser without instantiation*/
directApplication
    : typeName '.' APPLY '(' argumentList? ')' ';'
    ;

statement
    : assignmentStatement
    | methodCallStatement
    | directApplication
    | conditionalStatement
    | emptyStatement
    | blockStatement
    | exitStatement
    | returnStatement
    | switchStatement
    ;

blockStatement
    : optAnnotations '{' statOrDeclList? '}'
    ;

statOrDeclList/* empty */
    : statementOrDeclaration+
    ;

switchStatement
    : SWITCH '(' expression ')' '{' switchCases? '}'
    ;

switchCases/* empty */
    : switchCase+
    ;

switchCase
    : switchLabel ':' blockStatement?
    ;

switchLabel
    : name
    | DEFAULT
    ;

statementOrDeclaration
    : variableDeclaration
    | constantDeclaration
    | statement
    | instantiation
    ;

/************ TABLES *************/
tableDeclaration
    : optAnnotations TABLE name '{' tablePropertyList '}'
    ;

tablePropertyList
    : tableProperty+
    ;

tableProperty
	: KEY  '='  '{'  keyElementList?  '}' 						#key
	| ACTIONS  '='  '{'  actionList  '}'						#actions
	| CONST ENTRIES '=' '{' entriesList '}'						#constEntries
	| optAnnotations  CONST  IDENTIFIER  '='  initializer  ';'	#localVariable
	| optAnnotations  IDENTIFIER  '='  initializer  ';'			#localConstVariable
	;

keyElementList/* empty */
    : keyElement+
    ;

keyElement
    : expression ':' name optAnnotations ';'
    ;

actionList
    : actionRef ';' (actionRef  ';' )* 
    ;

entriesList
    : entry+
    ;

entry
    : optAnnotations keySetExpression ':' actionRef ';'
    ;

actionRef
    : optAnnotations name							#actionWithoutArgs
    | optAnnotations name '(' argumentList? ')'		#actionWithArgs
    ;

/************************* ACTION ********************************/

actionDeclaration
    : optAnnotations ACTION name '(' parameterList? ')' blockStatement
    ;

/************************* VARIABLES *****************************/

variableDeclaration
    : annotations? typeRef name optInitializer? ';'
    ;

constantDeclaration
    : optAnnotations CONST typeRef name '=' initializer ';'
    ;

optInitializer /* empty */
    : '=' initializer
    ;

initializer
    : expression
    ;

/************************* Expressions ****************************/

argumentList/* empty */
    : argument (',' argument)*
    ;

argument
    : expression
    ;

expressionList
    :expression (',' expression)*
    ;

member
    : name
    ;

prefixedNonTypeName
    : nonTypeName
    | dotPrefix nonTypeName
    ;

lvalue
    : prefixedNonTypeName						#prefixedNonTypeNameLvalue
    | lvalue '.' member							#prefixedNameLvalue
    | lvalue '[' expression ']'					#arrayIndexLvalue
    | lvalue '[' expression ':' expression ']'	#rangeIndexLvalue
    ;
    
    
expression
    : number											#integer
    | TRUE												#true
    | FALSE												#false
    | STRING_LITERAL									#string
    | nonTypeName										#nonType
    | '.' nonTypeName									#prefixedNonType
    | expression '[' expression ']'						#arrayIndex
    | expression '[' expression ':' expression ']'		#rangeIndex
    | '{' expressionList '}'							#set
    | '(' expression ')'								#of
    | '!' expression									#not
    | '~' expression									#negate
    | '-' expression									#unaryMinus
    | '+' expression									#unaryPlus
    | typeName '.' member								#memberAccess
    | ERROR '.' member									#errorMemberAccess
    | expression '.' member								#exprMemberAccess
    | expression '*' expression							#star
    | expression '/' expression							#slah
    | expression '%' expression							#mod
    | expression '+' expression							#plus
    | expression '-' expression							#minus
    | expression SHL expression 						#shiftLeft
    | expression '>' '>' expression						#shifRight
    | expression '&' expression							#bitAnd
    | expression '^' expression							#bitXor
    | expression '|' expression							#bitOr
    | expression PP expression							#plusPlus
    | expression LE expression							#lessThanOrEqual
    | expression GE expression							#greaterThanOrEqual
    | expression '<' expression							#lessThan
    | expression '>' expression							#greaterThan
    | expression NE expression							#notEqual
    | expression EQ expression							#equal
    | expression AND expression							#and
    | expression OR expression							#or
    | expression '?' expression ':' expression			#ternary
    | expression '<' typeArgumentList '>' '(' argumentList? ')' #templetizedFunctionCall
    | expression '(' argumentList? ')'					#functionCall
    | typeRef '(' argumentList? ')'						#constructor
    | '(' typeRef ')' expression						#cast
    ;

number
: decimalNumber
| octalNumber
| binaryNumber
| hexNumber
| realNumber;

decimalNumber
:Decimal_number;

octalNumber
:Octal_number;

binaryNumber
:Binary_number;

hexNumber
:Hex_number;

realNumber
:Real_number;


Hex_number : '0'[xX][0-9a-fA-F_]+ | [0-9]+[ws]'0'[xX][0-9a-fA-F_]+;
Decimal_number : '0'[dD][0-9_]+ | [0-9]+[ws]'0'[dD][0-9_]+;
Octal_number : '0'[oO][0-7_]+ | [0-9]+[ws]'0'[oO][0-7_]+;
Binary_number : '0'[bB][01_]+ | [0-9]+[ws]'0'[bB][01_]+;
Real_number : [0-9][0-9_]* | [0-9]+[ws][0-9_]+ ;

COMMENT
:   ('//' ~('\n'|'\r')* '\r'? '\n' 
        |   '/*' .*? '*/' )-> channel(HIDDEN)
;

WS  :   [ \t\n\r]+ -> channel(HIDDEN)
    ;





ABSTRACT : 'abstract';
ACTION : 'action';
ACTIONS : 'actions';
ENTRIES : 'entries';
APPLY : 'apply';
BOOL : 'bool';
BIT : 'bit';
CONST : 'const';
CONTROL : 'control';
DEFAULT : 'default';
ELSE : 'else';
ENUM : 'enum';
ERROR : 'error' ;
EXIT : 'exit';
EXTERN : 'extern';
FALSE : 'false';
HEADER : 'header';
HEADER_UNION : 'header_union';
IF : 'if';
IN : 'in';
INOUT : 'inout';
INT : 'int';
KEY : 'key';
MATCH_KIND : 'match_kind';
OUT : 'out';
PARSER : 'parser';
PACKAGE : 'package';
RETURN : 'return';
SELECT : 'select';
STATE : 'state';
STRUCT : 'struct';
SWITCH : 'switch';
TABLE : 'table';
THIS : 'this';
TRANSITION : 'transition';
TRUE : 'true';
TUPLE : 'tuple';
TYPEDEF : 'typedef';
VARBIT : 'varbit';
VOID : 'void';
DONTCARE : '_';
IDENTIFIER : [A-Za-z_][A-Za-z0-9_]*;
MASK : '&&&' ;
RANGE : '..';
SHL : '<<';
AND : '&&' ;
OR : '||';
EQ : '==';
NE : '!=';
GE : '>=';
LE : '<=';
PP : '++';
STRING_LITERAL : '"' ( ~[\n\r"] )* '"' ;



// Additional precedences need to be specified

